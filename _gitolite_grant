#!/bin/bash
#
# Add or change permissions for user (creates repo if it does not exists)
#
# $1 = repo name
# $2 = user name
# $3 = user permissions (RW|R)
#
. $(dirname $0)/_helper                #import functions
. $(dirname $0)/_helper_gitolite       #import functions
. $(dirname $0)/_helper_gitolite_grant #import functions
repo=$1
user=$2
perm=$3

git_check_user_name #check if we have git user name (i.e. config file)

#get git user name
git_user=$(get_git_user_name)
git_user_admin="$git_user-admin"
git_user_admin_home=$(eval echo "~$git_user_admin")
path="$git_user_admin_home/gitolite-admin/conf/gitolite.conf"

cfg=$(gitolite_grant $repo $user $perm $path)

if [[ "$cfg" == ERR* ]]; then
	if [ "$cfg" == "ERR_PARAMS" ]; then printf "\n\n\tUsage: $0 gitolite grant <repo> <user> <perm>\n\n"; exit -1; fi
	if [ "$cfg" == "ERR_PERM" ]; then echo "ERROR: Permission should be RW or R"; exit -1; fi
	if [ "$cfg" == "ERR_NO_FILE" ]; then echo "ERROR: Cannot find gitolite config file"; exit -1; fi
	if [ "$cfg" == "ERR_ADMIN_REPO" ]; then echo "ERROR: Cannot change admin user perms (please do not shoot yourself in the feet)"; exit -1; fi
	if [ "$cfg" == "ERR_ADMIN_USER" ]; then echo "ERROR: Cannot change admin repo perms (please do not shoot yourself in the feet)"; exit -1; fi
	#fallback error message
	echo "$cfg"; exit -1;
fi

echo "$cfg"
echo "$cfg" > "$path"
chown "$git_user_admin":"$git_user_admin" "$path"

gitolite_save "grant $perm for user $user at repo $repo"

exit